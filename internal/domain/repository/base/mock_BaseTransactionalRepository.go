// Code generated by mockery v2.43.2. DO NOT EDIT.

package base

import mock "github.com/stretchr/testify/mock"

// MockBaseTransactionalRepository is an autogenerated mock type for the BaseTransactionalRepository type
type MockBaseTransactionalRepository[TRepository interface{}, TDBConnection interface{}] struct {
	mock.Mock
}

type MockBaseTransactionalRepository_Expecter[TRepository interface{}, TDBConnection interface{}] struct {
	mock *mock.Mock
}

func (_m *MockBaseTransactionalRepository[TRepository, TDBConnection]) EXPECT() *MockBaseTransactionalRepository_Expecter[TRepository, TDBConnection] {
	return &MockBaseTransactionalRepository_Expecter[TRepository, TDBConnection]{mock: &_m.Mock}
}

// Use provides a mock function with given fields: txConnection
func (_m *MockBaseTransactionalRepository[TRepository, TDBConnection]) Use(txConnection IDBConnection[TDBConnection]) TRepository {
	ret := _m.Called(txConnection)

	if len(ret) == 0 {
		panic("no return value specified for Use")
	}

	var r0 TRepository
	if rf, ok := ret.Get(0).(func(IDBConnection[TDBConnection]) TRepository); ok {
		r0 = rf(txConnection)
	} else {
		r0 = ret.Get(0).(TRepository)
	}

	return r0
}

// MockBaseTransactionalRepository_Use_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Use'
type MockBaseTransactionalRepository_Use_Call[TRepository interface{}, TDBConnection interface{}] struct {
	*mock.Call
}

// Use is a helper method to define mock.On call
//   - txConnection IDBConnection[TDBConnection]
func (_e *MockBaseTransactionalRepository_Expecter[TRepository, TDBConnection]) Use(txConnection interface{}) *MockBaseTransactionalRepository_Use_Call[TRepository, TDBConnection] {
	return &MockBaseTransactionalRepository_Use_Call[TRepository, TDBConnection]{Call: _e.mock.On("Use", txConnection)}
}

func (_c *MockBaseTransactionalRepository_Use_Call[TRepository, TDBConnection]) Run(run func(txConnection IDBConnection[TDBConnection])) *MockBaseTransactionalRepository_Use_Call[TRepository, TDBConnection] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(IDBConnection[TDBConnection]))
	})
	return _c
}

func (_c *MockBaseTransactionalRepository_Use_Call[TRepository, TDBConnection]) Return(_a0 TRepository) *MockBaseTransactionalRepository_Use_Call[TRepository, TDBConnection] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBaseTransactionalRepository_Use_Call[TRepository, TDBConnection]) RunAndReturn(run func(IDBConnection[TDBConnection]) TRepository) *MockBaseTransactionalRepository_Use_Call[TRepository, TDBConnection] {
	_c.Call.Return(run)
	return _c
}

// NewMockBaseTransactionalRepository creates a new instance of MockBaseTransactionalRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBaseTransactionalRepository[TRepository interface{}, TDBConnection interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBaseTransactionalRepository[TRepository, TDBConnection] {
	mock := &MockBaseTransactionalRepository[TRepository, TDBConnection]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
