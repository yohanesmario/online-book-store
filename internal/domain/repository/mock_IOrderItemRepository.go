// Code generated by mockery v2.43.2. DO NOT EDIT.

package repository

import (
	mock "github.com/stretchr/testify/mock"
	base "github.com/yohanesmario/online-book-store/internal/domain/repository/base"

	model "github.com/yohanesmario/online-book-store/internal/domain/model"
)

// MockIOrderItemRepository is an autogenerated mock type for the IOrderItemRepository type
type MockIOrderItemRepository[TDBConnection interface{}] struct {
	mock.Mock
}

type MockIOrderItemRepository_Expecter[TDBConnection interface{}] struct {
	mock *mock.Mock
}

func (_m *MockIOrderItemRepository[TDBConnection]) EXPECT() *MockIOrderItemRepository_Expecter[TDBConnection] {
	return &MockIOrderItemRepository_Expecter[TDBConnection]{mock: &_m.Mock}
}

// CreateOrderItems provides a mock function with given fields: orderItems
func (_m *MockIOrderItemRepository[TDBConnection]) CreateOrderItems(orderItems []*model.OrderItem) ([]*model.OrderItem, error) {
	ret := _m.Called(orderItems)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrderItems")
	}

	var r0 []*model.OrderItem
	var r1 error
	if rf, ok := ret.Get(0).(func([]*model.OrderItem) ([]*model.OrderItem, error)); ok {
		return rf(orderItems)
	}
	if rf, ok := ret.Get(0).(func([]*model.OrderItem) []*model.OrderItem); ok {
		r0 = rf(orderItems)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.OrderItem)
		}
	}

	if rf, ok := ret.Get(1).(func([]*model.OrderItem) error); ok {
		r1 = rf(orderItems)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIOrderItemRepository_CreateOrderItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrderItems'
type MockIOrderItemRepository_CreateOrderItems_Call[TDBConnection interface{}] struct {
	*mock.Call
}

// CreateOrderItems is a helper method to define mock.On call
//   - orderItems []*model.OrderItem
func (_e *MockIOrderItemRepository_Expecter[TDBConnection]) CreateOrderItems(orderItems interface{}) *MockIOrderItemRepository_CreateOrderItems_Call[TDBConnection] {
	return &MockIOrderItemRepository_CreateOrderItems_Call[TDBConnection]{Call: _e.mock.On("CreateOrderItems", orderItems)}
}

func (_c *MockIOrderItemRepository_CreateOrderItems_Call[TDBConnection]) Run(run func(orderItems []*model.OrderItem)) *MockIOrderItemRepository_CreateOrderItems_Call[TDBConnection] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*model.OrderItem))
	})
	return _c
}

func (_c *MockIOrderItemRepository_CreateOrderItems_Call[TDBConnection]) Return(_a0 []*model.OrderItem, _a1 error) *MockIOrderItemRepository_CreateOrderItems_Call[TDBConnection] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIOrderItemRepository_CreateOrderItems_Call[TDBConnection]) RunAndReturn(run func([]*model.OrderItem) ([]*model.OrderItem, error)) *MockIOrderItemRepository_CreateOrderItems_Call[TDBConnection] {
	_c.Call.Return(run)
	return _c
}

// GetOrderItemsByOrderIDs provides a mock function with given fields: orderIDs
func (_m *MockIOrderItemRepository[TDBConnection]) GetOrderItemsByOrderIDs(orderIDs []int32) ([]*model.OrderItem, error) {
	ret := _m.Called(orderIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderItemsByOrderIDs")
	}

	var r0 []*model.OrderItem
	var r1 error
	if rf, ok := ret.Get(0).(func([]int32) ([]*model.OrderItem, error)); ok {
		return rf(orderIDs)
	}
	if rf, ok := ret.Get(0).(func([]int32) []*model.OrderItem); ok {
		r0 = rf(orderIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.OrderItem)
		}
	}

	if rf, ok := ret.Get(1).(func([]int32) error); ok {
		r1 = rf(orderIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIOrderItemRepository_GetOrderItemsByOrderIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderItemsByOrderIDs'
type MockIOrderItemRepository_GetOrderItemsByOrderIDs_Call[TDBConnection interface{}] struct {
	*mock.Call
}

// GetOrderItemsByOrderIDs is a helper method to define mock.On call
//   - orderIDs []int32
func (_e *MockIOrderItemRepository_Expecter[TDBConnection]) GetOrderItemsByOrderIDs(orderIDs interface{}) *MockIOrderItemRepository_GetOrderItemsByOrderIDs_Call[TDBConnection] {
	return &MockIOrderItemRepository_GetOrderItemsByOrderIDs_Call[TDBConnection]{Call: _e.mock.On("GetOrderItemsByOrderIDs", orderIDs)}
}

func (_c *MockIOrderItemRepository_GetOrderItemsByOrderIDs_Call[TDBConnection]) Run(run func(orderIDs []int32)) *MockIOrderItemRepository_GetOrderItemsByOrderIDs_Call[TDBConnection] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]int32))
	})
	return _c
}

func (_c *MockIOrderItemRepository_GetOrderItemsByOrderIDs_Call[TDBConnection]) Return(_a0 []*model.OrderItem, _a1 error) *MockIOrderItemRepository_GetOrderItemsByOrderIDs_Call[TDBConnection] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIOrderItemRepository_GetOrderItemsByOrderIDs_Call[TDBConnection]) RunAndReturn(run func([]int32) ([]*model.OrderItem, error)) *MockIOrderItemRepository_GetOrderItemsByOrderIDs_Call[TDBConnection] {
	_c.Call.Return(run)
	return _c
}

// Use provides a mock function with given fields: txConnection
func (_m *MockIOrderItemRepository[TDBConnection]) Use(txConnection base.IDBConnection[TDBConnection]) IOrderItemRepository[TDBConnection] {
	ret := _m.Called(txConnection)

	if len(ret) == 0 {
		panic("no return value specified for Use")
	}

	var r0 IOrderItemRepository[TDBConnection]
	if rf, ok := ret.Get(0).(func(base.IDBConnection[TDBConnection]) IOrderItemRepository[TDBConnection]); ok {
		r0 = rf(txConnection)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(IOrderItemRepository[TDBConnection])
		}
	}

	return r0
}

// MockIOrderItemRepository_Use_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Use'
type MockIOrderItemRepository_Use_Call[TDBConnection interface{}] struct {
	*mock.Call
}

// Use is a helper method to define mock.On call
//   - txConnection base.IDBConnection[TDBConnection]
func (_e *MockIOrderItemRepository_Expecter[TDBConnection]) Use(txConnection interface{}) *MockIOrderItemRepository_Use_Call[TDBConnection] {
	return &MockIOrderItemRepository_Use_Call[TDBConnection]{Call: _e.mock.On("Use", txConnection)}
}

func (_c *MockIOrderItemRepository_Use_Call[TDBConnection]) Run(run func(txConnection base.IDBConnection[TDBConnection])) *MockIOrderItemRepository_Use_Call[TDBConnection] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(base.IDBConnection[TDBConnection]))
	})
	return _c
}

func (_c *MockIOrderItemRepository_Use_Call[TDBConnection]) Return(_a0 IOrderItemRepository[TDBConnection]) *MockIOrderItemRepository_Use_Call[TDBConnection] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIOrderItemRepository_Use_Call[TDBConnection]) RunAndReturn(run func(base.IDBConnection[TDBConnection]) IOrderItemRepository[TDBConnection]) *MockIOrderItemRepository_Use_Call[TDBConnection] {
	_c.Call.Return(run)
	return _c
}

// NewMockIOrderItemRepository creates a new instance of MockIOrderItemRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIOrderItemRepository[TDBConnection interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIOrderItemRepository[TDBConnection] {
	mock := &MockIOrderItemRepository[TDBConnection]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
